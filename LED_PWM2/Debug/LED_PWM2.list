
LED_PWM2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001110  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800121c  0800121c  0001121c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800123c  0800123c  0001123c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001240  08001240  00011240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000060  2000000c  08001250  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000006c  08001250  0002006c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d818  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001c73  00000000  00000000  0002d84d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004749  00000000  00000000  0002f4c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000670  00000000  00000000  00033c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000860  00000000  00000000  00034280  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000382c  00000000  00000000  00034ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002b12  00000000  00000000  0003830c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003ae1e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001238  00000000  00000000  0003ae9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001204 	.word	0x08001204

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001204 	.word	0x08001204

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f892 	bl	800028c <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f854 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f000 ff3a 	bl	8001024 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000028 	.word	0x20000028
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000028 	.word	0x20000028

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000202:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000206:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020e:	041b      	lsls	r3, r3, #16
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800021a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021c:	60d3      	str	r3, [r2, #12]
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf98      	it	ls
 8000242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	fa05 f303 	lsl.w	r3, r5, r3
 8000248:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	bf88      	it	hi
 800024e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	4019      	ands	r1, r3
 8000252:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000254:	fa05 f404 	lsl.w	r4, r5, r4
 8000258:	3c01      	subs	r4, #1
 800025a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800025c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	ea42 0201 	orr.w	r2, r2, r1
 8000262:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	bfaf      	iteee	ge
 8000268:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	4b06      	ldrlt	r3, [pc, #24]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
 800026e:	f000 000f 	andlt.w	r0, r0, #15
 8000272:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	bfa5      	ittet	ge
 8000276:	b2d2      	uxtbge	r2, r2
 8000278:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000282:	bd30      	pop	{r4, r5, pc}
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000ed14 	.word	0xe000ed14

0800028c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800028c:	3801      	subs	r0, #1
 800028e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000292:	d20a      	bcs.n	80002aa <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800029a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002aa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	e000e010 	.word	0xe000e010
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002ba:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	bf0c      	ite	eq
 80002c0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002c4:	f022 0204 	bicne.w	r2, r2, #4
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	4770      	bx	lr
 80002cc:	e000e010 	.word	0xe000e010

080002d0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002d0:	4770      	bx	lr

080002d2 <HAL_SYSTICK_IRQHandler>:
{
 80002d2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002d4:	f7ff fffc 	bl	80002d0 <HAL_SYSTICK_Callback>
 80002d8:	bd08      	pop	{r3, pc}
	...

080002dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002e0:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002e2:	4616      	mov	r6, r2
 80002e4:	4b65      	ldr	r3, [pc, #404]	; (800047c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002e6:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800048c <HAL_GPIO_Init+0x1b0>
 80002ea:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000490 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002ee:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002f2:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002f4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002f8:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d17f      	bne.n	8000400 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000300:	684d      	ldr	r5, [r1, #4]
 8000302:	2d12      	cmp	r5, #18
 8000304:	f000 80af 	beq.w	8000466 <HAL_GPIO_Init+0x18a>
 8000308:	f200 8088 	bhi.w	800041c <HAL_GPIO_Init+0x140>
 800030c:	2d02      	cmp	r5, #2
 800030e:	f000 80a7 	beq.w	8000460 <HAL_GPIO_Init+0x184>
 8000312:	d87c      	bhi.n	800040e <HAL_GPIO_Init+0x132>
 8000314:	2d00      	cmp	r5, #0
 8000316:	f000 808e 	beq.w	8000436 <HAL_GPIO_Init+0x15a>
 800031a:	2d01      	cmp	r5, #1
 800031c:	f000 809e 	beq.w	800045c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000320:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000324:	2cff      	cmp	r4, #255	; 0xff
 8000326:	bf93      	iteet	ls
 8000328:	4682      	movls	sl, r0
 800032a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800032e:	3d08      	subhi	r5, #8
 8000330:	f8d0 b000 	ldrls.w	fp, [r0]
 8000334:	bf92      	itee	ls
 8000336:	00b5      	lslls	r5, r6, #2
 8000338:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800033c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800033e:	fa09 f805 	lsl.w	r8, r9, r5
 8000342:	ea2b 0808 	bic.w	r8, fp, r8
 8000346:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800034a:	bf88      	it	hi
 800034c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000350:	ea48 0505 	orr.w	r5, r8, r5
 8000354:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000358:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800035c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000360:	d04e      	beq.n	8000400 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000362:	4d47      	ldr	r5, [pc, #284]	; (8000480 <HAL_GPIO_Init+0x1a4>)
 8000364:	4f46      	ldr	r7, [pc, #280]	; (8000480 <HAL_GPIO_Init+0x1a4>)
 8000366:	69ad      	ldr	r5, [r5, #24]
 8000368:	f026 0803 	bic.w	r8, r6, #3
 800036c:	f045 0501 	orr.w	r5, r5, #1
 8000370:	61bd      	str	r5, [r7, #24]
 8000372:	69bd      	ldr	r5, [r7, #24]
 8000374:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000378:	f005 0501 	and.w	r5, r5, #1
 800037c:	9501      	str	r5, [sp, #4]
 800037e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000382:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000386:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000388:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800038c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000390:	fa09 f90b 	lsl.w	r9, r9, fp
 8000394:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000398:	4d3a      	ldr	r5, [pc, #232]	; (8000484 <HAL_GPIO_Init+0x1a8>)
 800039a:	42a8      	cmp	r0, r5
 800039c:	d068      	beq.n	8000470 <HAL_GPIO_Init+0x194>
 800039e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003a2:	42a8      	cmp	r0, r5
 80003a4:	d066      	beq.n	8000474 <HAL_GPIO_Init+0x198>
 80003a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003aa:	42a8      	cmp	r0, r5
 80003ac:	d064      	beq.n	8000478 <HAL_GPIO_Init+0x19c>
 80003ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003b2:	42a8      	cmp	r0, r5
 80003b4:	bf0c      	ite	eq
 80003b6:	2503      	moveq	r5, #3
 80003b8:	2504      	movne	r5, #4
 80003ba:	fa05 f50b 	lsl.w	r5, r5, fp
 80003be:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80003c2:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003c6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003c8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003cc:	bf14      	ite	ne
 80003ce:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003d0:	43a5      	biceq	r5, r4
 80003d2:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003d4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003d6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003da:	bf14      	ite	ne
 80003dc:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003de:	43a5      	biceq	r5, r4
 80003e0:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003e2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003e4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003e8:	bf14      	ite	ne
 80003ea:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003ec:	43a5      	biceq	r5, r4
 80003ee:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003f0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003f2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003f6:	bf14      	ite	ne
 80003f8:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003fa:	ea25 0404 	biceq.w	r4, r5, r4
 80003fe:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000400:	3601      	adds	r6, #1
 8000402:	2e10      	cmp	r6, #16
 8000404:	f47f af73 	bne.w	80002ee <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000408:	b003      	add	sp, #12
 800040a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800040e:	2d03      	cmp	r5, #3
 8000410:	d022      	beq.n	8000458 <HAL_GPIO_Init+0x17c>
 8000412:	2d11      	cmp	r5, #17
 8000414:	d184      	bne.n	8000320 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000416:	68ca      	ldr	r2, [r1, #12]
 8000418:	3204      	adds	r2, #4
          break;
 800041a:	e781      	b.n	8000320 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800041c:	4f1a      	ldr	r7, [pc, #104]	; (8000488 <HAL_GPIO_Init+0x1ac>)
 800041e:	42bd      	cmp	r5, r7
 8000420:	d009      	beq.n	8000436 <HAL_GPIO_Init+0x15a>
 8000422:	d812      	bhi.n	800044a <HAL_GPIO_Init+0x16e>
 8000424:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000494 <HAL_GPIO_Init+0x1b8>
 8000428:	454d      	cmp	r5, r9
 800042a:	d004      	beq.n	8000436 <HAL_GPIO_Init+0x15a>
 800042c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000430:	454d      	cmp	r5, r9
 8000432:	f47f af75 	bne.w	8000320 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000436:	688a      	ldr	r2, [r1, #8]
 8000438:	b1c2      	cbz	r2, 800046c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800043a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800043c:	bf0c      	ite	eq
 800043e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000442:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000446:	2208      	movs	r2, #8
 8000448:	e76a      	b.n	8000320 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800044a:	4575      	cmp	r5, lr
 800044c:	d0f3      	beq.n	8000436 <HAL_GPIO_Init+0x15a>
 800044e:	4565      	cmp	r5, ip
 8000450:	d0f1      	beq.n	8000436 <HAL_GPIO_Init+0x15a>
 8000452:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000498 <HAL_GPIO_Init+0x1bc>
 8000456:	e7eb      	b.n	8000430 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000458:	2200      	movs	r2, #0
 800045a:	e761      	b.n	8000320 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800045c:	68ca      	ldr	r2, [r1, #12]
          break;
 800045e:	e75f      	b.n	8000320 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000460:	68ca      	ldr	r2, [r1, #12]
 8000462:	3208      	adds	r2, #8
          break;
 8000464:	e75c      	b.n	8000320 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000466:	68ca      	ldr	r2, [r1, #12]
 8000468:	320c      	adds	r2, #12
          break;
 800046a:	e759      	b.n	8000320 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800046c:	2204      	movs	r2, #4
 800046e:	e757      	b.n	8000320 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000470:	2500      	movs	r5, #0
 8000472:	e7a2      	b.n	80003ba <HAL_GPIO_Init+0xde>
 8000474:	2501      	movs	r5, #1
 8000476:	e7a0      	b.n	80003ba <HAL_GPIO_Init+0xde>
 8000478:	2502      	movs	r5, #2
 800047a:	e79e      	b.n	80003ba <HAL_GPIO_Init+0xde>
 800047c:	40010400 	.word	0x40010400
 8000480:	40021000 	.word	0x40021000
 8000484:	40010800 	.word	0x40010800
 8000488:	10210000 	.word	0x10210000
 800048c:	10310000 	.word	0x10310000
 8000490:	10320000 	.word	0x10320000
 8000494:	10110000 	.word	0x10110000
 8000498:	10220000 	.word	0x10220000

0800049c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800049c:	6803      	ldr	r3, [r0, #0]
{
 800049e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004a2:	07db      	lsls	r3, r3, #31
{
 80004a4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004a6:	d410      	bmi.n	80004ca <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004a8:	682b      	ldr	r3, [r5, #0]
 80004aa:	079f      	lsls	r7, r3, #30
 80004ac:	d45e      	bmi.n	800056c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004ae:	682b      	ldr	r3, [r5, #0]
 80004b0:	0719      	lsls	r1, r3, #28
 80004b2:	f100 8095 	bmi.w	80005e0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004b6:	682b      	ldr	r3, [r5, #0]
 80004b8:	075a      	lsls	r2, r3, #29
 80004ba:	f100 80bf 	bmi.w	800063c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004be:	69ea      	ldr	r2, [r5, #28]
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 812d 	bne.w	8000720 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80004c6:	2000      	movs	r0, #0
 80004c8:	e014      	b.n	80004f4 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004ca:	4c90      	ldr	r4, [pc, #576]	; (800070c <HAL_RCC_OscConfig+0x270>)
 80004cc:	6863      	ldr	r3, [r4, #4]
 80004ce:	f003 030c 	and.w	r3, r3, #12
 80004d2:	2b04      	cmp	r3, #4
 80004d4:	d007      	beq.n	80004e6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004d6:	6863      	ldr	r3, [r4, #4]
 80004d8:	f003 030c 	and.w	r3, r3, #12
 80004dc:	2b08      	cmp	r3, #8
 80004de:	d10c      	bne.n	80004fa <HAL_RCC_OscConfig+0x5e>
 80004e0:	6863      	ldr	r3, [r4, #4]
 80004e2:	03de      	lsls	r6, r3, #15
 80004e4:	d509      	bpl.n	80004fa <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004e6:	6823      	ldr	r3, [r4, #0]
 80004e8:	039c      	lsls	r4, r3, #14
 80004ea:	d5dd      	bpl.n	80004a8 <HAL_RCC_OscConfig+0xc>
 80004ec:	686b      	ldr	r3, [r5, #4]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d1da      	bne.n	80004a8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80004f2:	2001      	movs	r0, #1
}
 80004f4:	b002      	add	sp, #8
 80004f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004fa:	686b      	ldr	r3, [r5, #4]
 80004fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000500:	d110      	bne.n	8000524 <HAL_RCC_OscConfig+0x88>
 8000502:	6823      	ldr	r3, [r4, #0]
 8000504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000508:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800050a:	f7ff fe61 	bl	80001d0 <HAL_GetTick>
 800050e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000510:	6823      	ldr	r3, [r4, #0]
 8000512:	0398      	lsls	r0, r3, #14
 8000514:	d4c8      	bmi.n	80004a8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000516:	f7ff fe5b 	bl	80001d0 <HAL_GetTick>
 800051a:	1b80      	subs	r0, r0, r6
 800051c:	2864      	cmp	r0, #100	; 0x64
 800051e:	d9f7      	bls.n	8000510 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000520:	2003      	movs	r0, #3
 8000522:	e7e7      	b.n	80004f4 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000524:	b99b      	cbnz	r3, 800054e <HAL_RCC_OscConfig+0xb2>
 8000526:	6823      	ldr	r3, [r4, #0]
 8000528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800052c:	6023      	str	r3, [r4, #0]
 800052e:	6823      	ldr	r3, [r4, #0]
 8000530:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000534:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000536:	f7ff fe4b 	bl	80001d0 <HAL_GetTick>
 800053a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800053c:	6823      	ldr	r3, [r4, #0]
 800053e:	0399      	lsls	r1, r3, #14
 8000540:	d5b2      	bpl.n	80004a8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000542:	f7ff fe45 	bl	80001d0 <HAL_GetTick>
 8000546:	1b80      	subs	r0, r0, r6
 8000548:	2864      	cmp	r0, #100	; 0x64
 800054a:	d9f7      	bls.n	800053c <HAL_RCC_OscConfig+0xa0>
 800054c:	e7e8      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800054e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000552:	6823      	ldr	r3, [r4, #0]
 8000554:	d103      	bne.n	800055e <HAL_RCC_OscConfig+0xc2>
 8000556:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800055a:	6023      	str	r3, [r4, #0]
 800055c:	e7d1      	b.n	8000502 <HAL_RCC_OscConfig+0x66>
 800055e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000562:	6023      	str	r3, [r4, #0]
 8000564:	6823      	ldr	r3, [r4, #0]
 8000566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800056a:	e7cd      	b.n	8000508 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800056c:	4c67      	ldr	r4, [pc, #412]	; (800070c <HAL_RCC_OscConfig+0x270>)
 800056e:	6863      	ldr	r3, [r4, #4]
 8000570:	f013 0f0c 	tst.w	r3, #12
 8000574:	d007      	beq.n	8000586 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000576:	6863      	ldr	r3, [r4, #4]
 8000578:	f003 030c 	and.w	r3, r3, #12
 800057c:	2b08      	cmp	r3, #8
 800057e:	d110      	bne.n	80005a2 <HAL_RCC_OscConfig+0x106>
 8000580:	6863      	ldr	r3, [r4, #4]
 8000582:	03da      	lsls	r2, r3, #15
 8000584:	d40d      	bmi.n	80005a2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000586:	6823      	ldr	r3, [r4, #0]
 8000588:	079b      	lsls	r3, r3, #30
 800058a:	d502      	bpl.n	8000592 <HAL_RCC_OscConfig+0xf6>
 800058c:	692b      	ldr	r3, [r5, #16]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d1af      	bne.n	80004f2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000592:	6823      	ldr	r3, [r4, #0]
 8000594:	696a      	ldr	r2, [r5, #20]
 8000596:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800059a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800059e:	6023      	str	r3, [r4, #0]
 80005a0:	e785      	b.n	80004ae <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005a2:	692a      	ldr	r2, [r5, #16]
 80005a4:	4b5a      	ldr	r3, [pc, #360]	; (8000710 <HAL_RCC_OscConfig+0x274>)
 80005a6:	b16a      	cbz	r2, 80005c4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80005a8:	2201      	movs	r2, #1
 80005aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005ac:	f7ff fe10 	bl	80001d0 <HAL_GetTick>
 80005b0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005b2:	6823      	ldr	r3, [r4, #0]
 80005b4:	079f      	lsls	r7, r3, #30
 80005b6:	d4ec      	bmi.n	8000592 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005b8:	f7ff fe0a 	bl	80001d0 <HAL_GetTick>
 80005bc:	1b80      	subs	r0, r0, r6
 80005be:	2802      	cmp	r0, #2
 80005c0:	d9f7      	bls.n	80005b2 <HAL_RCC_OscConfig+0x116>
 80005c2:	e7ad      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005c4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005c6:	f7ff fe03 	bl	80001d0 <HAL_GetTick>
 80005ca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005cc:	6823      	ldr	r3, [r4, #0]
 80005ce:	0798      	lsls	r0, r3, #30
 80005d0:	f57f af6d 	bpl.w	80004ae <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005d4:	f7ff fdfc 	bl	80001d0 <HAL_GetTick>
 80005d8:	1b80      	subs	r0, r0, r6
 80005da:	2802      	cmp	r0, #2
 80005dc:	d9f6      	bls.n	80005cc <HAL_RCC_OscConfig+0x130>
 80005de:	e79f      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005e0:	69aa      	ldr	r2, [r5, #24]
 80005e2:	4c4a      	ldr	r4, [pc, #296]	; (800070c <HAL_RCC_OscConfig+0x270>)
 80005e4:	4b4b      	ldr	r3, [pc, #300]	; (8000714 <HAL_RCC_OscConfig+0x278>)
 80005e6:	b1da      	cbz	r2, 8000620 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80005e8:	2201      	movs	r2, #1
 80005ea:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005ec:	f7ff fdf0 	bl	80001d0 <HAL_GetTick>
 80005f0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005f4:	079b      	lsls	r3, r3, #30
 80005f6:	d50d      	bpl.n	8000614 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80005f8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80005fc:	4b46      	ldr	r3, [pc, #280]	; (8000718 <HAL_RCC_OscConfig+0x27c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	fbb3 f3f2 	udiv	r3, r3, r2
 8000604:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000606:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000608:	9b01      	ldr	r3, [sp, #4]
 800060a:	1e5a      	subs	r2, r3, #1
 800060c:	9201      	str	r2, [sp, #4]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d1f9      	bne.n	8000606 <HAL_RCC_OscConfig+0x16a>
 8000612:	e750      	b.n	80004b6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000614:	f7ff fddc 	bl	80001d0 <HAL_GetTick>
 8000618:	1b80      	subs	r0, r0, r6
 800061a:	2802      	cmp	r0, #2
 800061c:	d9e9      	bls.n	80005f2 <HAL_RCC_OscConfig+0x156>
 800061e:	e77f      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000620:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000622:	f7ff fdd5 	bl	80001d0 <HAL_GetTick>
 8000626:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000628:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800062a:	079f      	lsls	r7, r3, #30
 800062c:	f57f af43 	bpl.w	80004b6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000630:	f7ff fdce 	bl	80001d0 <HAL_GetTick>
 8000634:	1b80      	subs	r0, r0, r6
 8000636:	2802      	cmp	r0, #2
 8000638:	d9f6      	bls.n	8000628 <HAL_RCC_OscConfig+0x18c>
 800063a:	e771      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800063c:	4c33      	ldr	r4, [pc, #204]	; (800070c <HAL_RCC_OscConfig+0x270>)
 800063e:	69e3      	ldr	r3, [r4, #28]
 8000640:	00d8      	lsls	r0, r3, #3
 8000642:	d424      	bmi.n	800068e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000644:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000646:	69e3      	ldr	r3, [r4, #28]
 8000648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064c:	61e3      	str	r3, [r4, #28]
 800064e:	69e3      	ldr	r3, [r4, #28]
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000658:	4e30      	ldr	r6, [pc, #192]	; (800071c <HAL_RCC_OscConfig+0x280>)
 800065a:	6833      	ldr	r3, [r6, #0]
 800065c:	05d9      	lsls	r1, r3, #23
 800065e:	d518      	bpl.n	8000692 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000660:	68eb      	ldr	r3, [r5, #12]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d126      	bne.n	80006b4 <HAL_RCC_OscConfig+0x218>
 8000666:	6a23      	ldr	r3, [r4, #32]
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800066e:	f7ff fdaf 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000672:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000676:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000678:	6a23      	ldr	r3, [r4, #32]
 800067a:	079b      	lsls	r3, r3, #30
 800067c:	d53f      	bpl.n	80006fe <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800067e:	2f00      	cmp	r7, #0
 8000680:	f43f af1d 	beq.w	80004be <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000684:	69e3      	ldr	r3, [r4, #28]
 8000686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800068a:	61e3      	str	r3, [r4, #28]
 800068c:	e717      	b.n	80004be <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800068e:	2700      	movs	r7, #0
 8000690:	e7e2      	b.n	8000658 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000692:	6833      	ldr	r3, [r6, #0]
 8000694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000698:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800069a:	f7ff fd99 	bl	80001d0 <HAL_GetTick>
 800069e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006a0:	6833      	ldr	r3, [r6, #0]
 80006a2:	05da      	lsls	r2, r3, #23
 80006a4:	d4dc      	bmi.n	8000660 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006a6:	f7ff fd93 	bl	80001d0 <HAL_GetTick>
 80006aa:	eba0 0008 	sub.w	r0, r0, r8
 80006ae:	2864      	cmp	r0, #100	; 0x64
 80006b0:	d9f6      	bls.n	80006a0 <HAL_RCC_OscConfig+0x204>
 80006b2:	e735      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006b4:	b9ab      	cbnz	r3, 80006e2 <HAL_RCC_OscConfig+0x246>
 80006b6:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006b8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006bc:	f023 0301 	bic.w	r3, r3, #1
 80006c0:	6223      	str	r3, [r4, #32]
 80006c2:	6a23      	ldr	r3, [r4, #32]
 80006c4:	f023 0304 	bic.w	r3, r3, #4
 80006c8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006ca:	f7ff fd81 	bl	80001d0 <HAL_GetTick>
 80006ce:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006d0:	6a23      	ldr	r3, [r4, #32]
 80006d2:	0798      	lsls	r0, r3, #30
 80006d4:	d5d3      	bpl.n	800067e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006d6:	f7ff fd7b 	bl	80001d0 <HAL_GetTick>
 80006da:	1b80      	subs	r0, r0, r6
 80006dc:	4540      	cmp	r0, r8
 80006de:	d9f7      	bls.n	80006d0 <HAL_RCC_OscConfig+0x234>
 80006e0:	e71e      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006e2:	2b05      	cmp	r3, #5
 80006e4:	6a23      	ldr	r3, [r4, #32]
 80006e6:	d103      	bne.n	80006f0 <HAL_RCC_OscConfig+0x254>
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	6223      	str	r3, [r4, #32]
 80006ee:	e7ba      	b.n	8000666 <HAL_RCC_OscConfig+0x1ca>
 80006f0:	f023 0301 	bic.w	r3, r3, #1
 80006f4:	6223      	str	r3, [r4, #32]
 80006f6:	6a23      	ldr	r3, [r4, #32]
 80006f8:	f023 0304 	bic.w	r3, r3, #4
 80006fc:	e7b6      	b.n	800066c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006fe:	f7ff fd67 	bl	80001d0 <HAL_GetTick>
 8000702:	eba0 0008 	sub.w	r0, r0, r8
 8000706:	42b0      	cmp	r0, r6
 8000708:	d9b6      	bls.n	8000678 <HAL_RCC_OscConfig+0x1dc>
 800070a:	e709      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
 800070c:	40021000 	.word	0x40021000
 8000710:	42420000 	.word	0x42420000
 8000714:	42420480 	.word	0x42420480
 8000718:	20000008 	.word	0x20000008
 800071c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000720:	4c22      	ldr	r4, [pc, #136]	; (80007ac <HAL_RCC_OscConfig+0x310>)
 8000722:	6863      	ldr	r3, [r4, #4]
 8000724:	f003 030c 	and.w	r3, r3, #12
 8000728:	2b08      	cmp	r3, #8
 800072a:	f43f aee2 	beq.w	80004f2 <HAL_RCC_OscConfig+0x56>
 800072e:	2300      	movs	r3, #0
 8000730:	4e1f      	ldr	r6, [pc, #124]	; (80007b0 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000732:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000734:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000736:	d12b      	bne.n	8000790 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000738:	f7ff fd4a 	bl	80001d0 <HAL_GetTick>
 800073c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800073e:	6823      	ldr	r3, [r4, #0]
 8000740:	0199      	lsls	r1, r3, #6
 8000742:	d41f      	bmi.n	8000784 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000744:	6a2b      	ldr	r3, [r5, #32]
 8000746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800074a:	d105      	bne.n	8000758 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800074c:	6862      	ldr	r2, [r4, #4]
 800074e:	68a9      	ldr	r1, [r5, #8]
 8000750:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000754:	430a      	orrs	r2, r1
 8000756:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000758:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800075a:	6862      	ldr	r2, [r4, #4]
 800075c:	430b      	orrs	r3, r1
 800075e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000762:	4313      	orrs	r3, r2
 8000764:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000766:	2301      	movs	r3, #1
 8000768:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800076a:	f7ff fd31 	bl	80001d0 <HAL_GetTick>
 800076e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000770:	6823      	ldr	r3, [r4, #0]
 8000772:	019a      	lsls	r2, r3, #6
 8000774:	f53f aea7 	bmi.w	80004c6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000778:	f7ff fd2a 	bl	80001d0 <HAL_GetTick>
 800077c:	1b40      	subs	r0, r0, r5
 800077e:	2802      	cmp	r0, #2
 8000780:	d9f6      	bls.n	8000770 <HAL_RCC_OscConfig+0x2d4>
 8000782:	e6cd      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000784:	f7ff fd24 	bl	80001d0 <HAL_GetTick>
 8000788:	1bc0      	subs	r0, r0, r7
 800078a:	2802      	cmp	r0, #2
 800078c:	d9d7      	bls.n	800073e <HAL_RCC_OscConfig+0x2a2>
 800078e:	e6c7      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000790:	f7ff fd1e 	bl	80001d0 <HAL_GetTick>
 8000794:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000796:	6823      	ldr	r3, [r4, #0]
 8000798:	019b      	lsls	r3, r3, #6
 800079a:	f57f ae94 	bpl.w	80004c6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800079e:	f7ff fd17 	bl	80001d0 <HAL_GetTick>
 80007a2:	1b40      	subs	r0, r0, r5
 80007a4:	2802      	cmp	r0, #2
 80007a6:	d9f6      	bls.n	8000796 <HAL_RCC_OscConfig+0x2fa>
 80007a8:	e6ba      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
 80007aa:	bf00      	nop
 80007ac:	40021000 	.word	0x40021000
 80007b0:	42420060 	.word	0x42420060

080007b4 <HAL_RCC_GetSysClockFreq>:
{
 80007b4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <HAL_RCC_GetSysClockFreq+0x68>)
{
 80007b8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007ba:	ac02      	add	r4, sp, #8
 80007bc:	f103 0510 	add.w	r5, r3, #16
 80007c0:	4622      	mov	r2, r4
 80007c2:	6818      	ldr	r0, [r3, #0]
 80007c4:	6859      	ldr	r1, [r3, #4]
 80007c6:	3308      	adds	r3, #8
 80007c8:	c203      	stmia	r2!, {r0, r1}
 80007ca:	42ab      	cmp	r3, r5
 80007cc:	4614      	mov	r4, r2
 80007ce:	d1f7      	bne.n	80007c0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007d0:	2301      	movs	r3, #1
 80007d2:	f88d 3004 	strb.w	r3, [sp, #4]
 80007d6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80007d8:	4911      	ldr	r1, [pc, #68]	; (8000820 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007da:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80007de:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80007e0:	f003 020c 	and.w	r2, r3, #12
 80007e4:	2a08      	cmp	r2, #8
 80007e6:	d117      	bne.n	8000818 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007e8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80007ec:	a806      	add	r0, sp, #24
 80007ee:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007f0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007f2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007f6:	d50c      	bpl.n	8000812 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007f8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007fa:	480a      	ldr	r0, [pc, #40]	; (8000824 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007fc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000800:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000802:	aa06      	add	r2, sp, #24
 8000804:	4413      	add	r3, r2
 8000806:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800080a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800080e:	b007      	add	sp, #28
 8000810:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <HAL_RCC_GetSysClockFreq+0x74>)
 8000814:	4350      	muls	r0, r2
 8000816:	e7fa      	b.n	800080e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000818:	4802      	ldr	r0, [pc, #8]	; (8000824 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800081a:	e7f8      	b.n	800080e <HAL_RCC_GetSysClockFreq+0x5a>
 800081c:	0800121c 	.word	0x0800121c
 8000820:	40021000 	.word	0x40021000
 8000824:	007a1200 	.word	0x007a1200
 8000828:	003d0900 	.word	0x003d0900

0800082c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800082c:	4a4d      	ldr	r2, [pc, #308]	; (8000964 <HAL_RCC_ClockConfig+0x138>)
{
 800082e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000832:	6813      	ldr	r3, [r2, #0]
{
 8000834:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	428b      	cmp	r3, r1
{
 800083c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800083e:	d328      	bcc.n	8000892 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000840:	682a      	ldr	r2, [r5, #0]
 8000842:	0791      	lsls	r1, r2, #30
 8000844:	d432      	bmi.n	80008ac <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000846:	07d2      	lsls	r2, r2, #31
 8000848:	d438      	bmi.n	80008bc <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800084a:	4a46      	ldr	r2, [pc, #280]	; (8000964 <HAL_RCC_ClockConfig+0x138>)
 800084c:	6813      	ldr	r3, [r2, #0]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	429e      	cmp	r6, r3
 8000854:	d373      	bcc.n	800093e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000856:	682a      	ldr	r2, [r5, #0]
 8000858:	4c43      	ldr	r4, [pc, #268]	; (8000968 <HAL_RCC_ClockConfig+0x13c>)
 800085a:	f012 0f04 	tst.w	r2, #4
 800085e:	d179      	bne.n	8000954 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000860:	0713      	lsls	r3, r2, #28
 8000862:	d506      	bpl.n	8000872 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000864:	6863      	ldr	r3, [r4, #4]
 8000866:	692a      	ldr	r2, [r5, #16]
 8000868:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800086c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000870:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000872:	f7ff ff9f 	bl	80007b4 <HAL_RCC_GetSysClockFreq>
 8000876:	6863      	ldr	r3, [r4, #4]
 8000878:	4a3c      	ldr	r2, [pc, #240]	; (800096c <HAL_RCC_ClockConfig+0x140>)
 800087a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800087e:	5cd3      	ldrb	r3, [r2, r3]
 8000880:	40d8      	lsrs	r0, r3
 8000882:	4b3b      	ldr	r3, [pc, #236]	; (8000970 <HAL_RCC_ClockConfig+0x144>)
 8000884:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000886:	2000      	movs	r0, #0
 8000888:	f7ff fc60 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 800088c:	2000      	movs	r0, #0
}
 800088e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000892:	6813      	ldr	r3, [r2, #0]
 8000894:	f023 0307 	bic.w	r3, r3, #7
 8000898:	430b      	orrs	r3, r1
 800089a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800089c:	6813      	ldr	r3, [r2, #0]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	4299      	cmp	r1, r3
 80008a4:	d0cc      	beq.n	8000840 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80008a6:	2001      	movs	r0, #1
 80008a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008ac:	492e      	ldr	r1, [pc, #184]	; (8000968 <HAL_RCC_ClockConfig+0x13c>)
 80008ae:	68a8      	ldr	r0, [r5, #8]
 80008b0:	684b      	ldr	r3, [r1, #4]
 80008b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80008b6:	4303      	orrs	r3, r0
 80008b8:	604b      	str	r3, [r1, #4]
 80008ba:	e7c4      	b.n	8000846 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008bc:	686a      	ldr	r2, [r5, #4]
 80008be:	4c2a      	ldr	r4, [pc, #168]	; (8000968 <HAL_RCC_ClockConfig+0x13c>)
 80008c0:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008c2:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008c4:	d11c      	bne.n	8000900 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008c6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008ca:	d0ec      	beq.n	80008a6 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008cc:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008ce:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008d2:	f023 0303 	bic.w	r3, r3, #3
 80008d6:	4313      	orrs	r3, r2
 80008d8:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80008da:	f7ff fc79 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008de:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80008e0:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d114      	bne.n	8000910 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80008e6:	6863      	ldr	r3, [r4, #4]
 80008e8:	f003 030c 	and.w	r3, r3, #12
 80008ec:	2b04      	cmp	r3, #4
 80008ee:	d0ac      	beq.n	800084a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008f0:	f7ff fc6e 	bl	80001d0 <HAL_GetTick>
 80008f4:	1bc0      	subs	r0, r0, r7
 80008f6:	4540      	cmp	r0, r8
 80008f8:	d9f5      	bls.n	80008e6 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 80008fa:	2003      	movs	r0, #3
 80008fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000900:	2a02      	cmp	r2, #2
 8000902:	d102      	bne.n	800090a <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000904:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000908:	e7df      	b.n	80008ca <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800090a:	f013 0f02 	tst.w	r3, #2
 800090e:	e7dc      	b.n	80008ca <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000910:	2b02      	cmp	r3, #2
 8000912:	d10f      	bne.n	8000934 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000914:	6863      	ldr	r3, [r4, #4]
 8000916:	f003 030c 	and.w	r3, r3, #12
 800091a:	2b08      	cmp	r3, #8
 800091c:	d095      	beq.n	800084a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800091e:	f7ff fc57 	bl	80001d0 <HAL_GetTick>
 8000922:	1bc0      	subs	r0, r0, r7
 8000924:	4540      	cmp	r0, r8
 8000926:	d9f5      	bls.n	8000914 <HAL_RCC_ClockConfig+0xe8>
 8000928:	e7e7      	b.n	80008fa <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800092a:	f7ff fc51 	bl	80001d0 <HAL_GetTick>
 800092e:	1bc0      	subs	r0, r0, r7
 8000930:	4540      	cmp	r0, r8
 8000932:	d8e2      	bhi.n	80008fa <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000934:	6863      	ldr	r3, [r4, #4]
 8000936:	f013 0f0c 	tst.w	r3, #12
 800093a:	d1f6      	bne.n	800092a <HAL_RCC_ClockConfig+0xfe>
 800093c:	e785      	b.n	800084a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800093e:	6813      	ldr	r3, [r2, #0]
 8000940:	f023 0307 	bic.w	r3, r3, #7
 8000944:	4333      	orrs	r3, r6
 8000946:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000948:	6813      	ldr	r3, [r2, #0]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	429e      	cmp	r6, r3
 8000950:	d1a9      	bne.n	80008a6 <HAL_RCC_ClockConfig+0x7a>
 8000952:	e780      	b.n	8000856 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000954:	6863      	ldr	r3, [r4, #4]
 8000956:	68e9      	ldr	r1, [r5, #12]
 8000958:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800095c:	430b      	orrs	r3, r1
 800095e:	6063      	str	r3, [r4, #4]
 8000960:	e77e      	b.n	8000860 <HAL_RCC_ClockConfig+0x34>
 8000962:	bf00      	nop
 8000964:	40022000 	.word	0x40022000
 8000968:	40021000 	.word	0x40021000
 800096c:	0800122c 	.word	0x0800122c
 8000970:	20000008 	.word	0x20000008

08000974 <HAL_RCC_GetHCLKFreq>:
}
 8000974:	4b01      	ldr	r3, [pc, #4]	; (800097c <HAL_RCC_GetHCLKFreq+0x8>)
 8000976:	6818      	ldr	r0, [r3, #0]
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000008 	.word	0x20000008

08000980 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000980:	6a03      	ldr	r3, [r0, #32]
{
 8000982:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000984:	f023 0301 	bic.w	r3, r3, #1
 8000988:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800098a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800098c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800098e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000990:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000992:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000996:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000998:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800099a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800099e:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80009a0:	4d0a      	ldr	r5, [pc, #40]	; (80009cc <TIM_OC1_SetConfig+0x4c>)
 80009a2:	42a8      	cmp	r0, r5
 80009a4:	d10b      	bne.n	80009be <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80009a6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80009a8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80009ac:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80009ae:	698e      	ldr	r6, [r1, #24]
 80009b0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80009b2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80009b6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80009b8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80009bc:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80009be:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80009c0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80009c2:	684a      	ldr	r2, [r1, #4]
 80009c4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80009c6:	6203      	str	r3, [r0, #32]
 80009c8:	bd70      	pop	{r4, r5, r6, pc}
 80009ca:	bf00      	nop
 80009cc:	40012c00 	.word	0x40012c00

080009d0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80009d0:	6a03      	ldr	r3, [r0, #32]
{
 80009d2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80009d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009d8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80009da:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80009dc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80009de:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80009e0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80009e2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80009e6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80009e8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80009ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80009ee:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80009f2:	4d0b      	ldr	r5, [pc, #44]	; (8000a20 <TIM_OC3_SetConfig+0x50>)
 80009f4:	42a8      	cmp	r0, r5
 80009f6:	d10d      	bne.n	8000a14 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80009f8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80009fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80009fe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000a02:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000a04:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000a06:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000a0a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8000a0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000a10:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000a14:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000a16:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000a18:	684a      	ldr	r2, [r1, #4]
 8000a1a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000a1c:	6203      	str	r3, [r0, #32]
 8000a1e:	bd70      	pop	{r4, r5, r6, pc}
 8000a20:	40012c00 	.word	0x40012c00

08000a24 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000a24:	6a03      	ldr	r3, [r0, #32]
{
 8000a26:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000a28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a2c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000a2e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000a30:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000a32:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000a34:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000a36:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000a3a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000a3e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000a40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000a44:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000a48:	4d06      	ldr	r5, [pc, #24]	; (8000a64 <TIM_OC4_SetConfig+0x40>)
 8000a4a:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8000a4c:	bf02      	ittt	eq
 8000a4e:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000a50:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8000a54:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000a58:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000a5a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000a5c:	684a      	ldr	r2, [r1, #4]
 8000a5e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000a60:	6203      	str	r3, [r0, #32]
 8000a62:	bd30      	pop	{r4, r5, pc}
 8000a64:	40012c00 	.word	0x40012c00

08000a68 <HAL_TIM_PWM_MspInit>:
 8000a68:	4770      	bx	lr

08000a6a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000a6a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000a6e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	f04f 0302 	mov.w	r3, #2
 8000a76:	d01c      	beq.n	8000ab2 <HAL_TIM_ConfigClockSource+0x48>
 8000a78:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8000a7a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8000a7e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000a80:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8000a84:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000a86:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000a8a:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000a8e:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8000a90:	680a      	ldr	r2, [r1, #0]
 8000a92:	2a40      	cmp	r2, #64	; 0x40
 8000a94:	d079      	beq.n	8000b8a <HAL_TIM_ConfigClockSource+0x120>
 8000a96:	d819      	bhi.n	8000acc <HAL_TIM_ConfigClockSource+0x62>
 8000a98:	2a10      	cmp	r2, #16
 8000a9a:	f000 8093 	beq.w	8000bc4 <HAL_TIM_ConfigClockSource+0x15a>
 8000a9e:	d80a      	bhi.n	8000ab6 <HAL_TIM_ConfigClockSource+0x4c>
 8000aa0:	2a00      	cmp	r2, #0
 8000aa2:	f000 8089 	beq.w	8000bb8 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8000aac:	2300      	movs	r3, #0
 8000aae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000ab2:	4618      	mov	r0, r3
}
 8000ab4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000ab6:	2a20      	cmp	r2, #32
 8000ab8:	f000 808a 	beq.w	8000bd0 <HAL_TIM_ConfigClockSource+0x166>
 8000abc:	2a30      	cmp	r2, #48	; 0x30
 8000abe:	d1f2      	bne.n	8000aa6 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000ac0:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ac2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000ac6:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000aca:	e036      	b.n	8000b3a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000acc:	2a70      	cmp	r2, #112	; 0x70
 8000ace:	d036      	beq.n	8000b3e <HAL_TIM_ConfigClockSource+0xd4>
 8000ad0:	d81b      	bhi.n	8000b0a <HAL_TIM_ConfigClockSource+0xa0>
 8000ad2:	2a50      	cmp	r2, #80	; 0x50
 8000ad4:	d042      	beq.n	8000b5c <HAL_TIM_ConfigClockSource+0xf2>
 8000ad6:	2a60      	cmp	r2, #96	; 0x60
 8000ad8:	d1e5      	bne.n	8000aa6 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000ada:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000adc:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000ade:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000ae2:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000ae4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000ae6:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000ae8:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000aea:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000aee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000af2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000af6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000afa:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000afc:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000afe:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b04:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000b08:	e017      	b.n	8000b3a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000b0a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000b0e:	d011      	beq.n	8000b34 <HAL_TIM_ConfigClockSource+0xca>
 8000b10:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000b14:	d1c7      	bne.n	8000aa6 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000b16:	688a      	ldr	r2, [r1, #8]
 8000b18:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000b1a:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000b1c:	68c9      	ldr	r1, [r1, #12]
 8000b1e:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000b20:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000b24:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000b28:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000b2a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000b2c:	689a      	ldr	r2, [r3, #8]
 8000b2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000b32:	e002      	b.n	8000b3a <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000b34:	689a      	ldr	r2, [r3, #8]
 8000b36:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	e7b3      	b.n	8000aa6 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000b3e:	688a      	ldr	r2, [r1, #8]
 8000b40:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000b42:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000b44:	68c9      	ldr	r1, [r1, #12]
 8000b46:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000b48:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000b4c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000b50:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000b52:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000b54:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000b56:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000b5a:	e7ee      	b.n	8000b3a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000b5c:	684c      	ldr	r4, [r1, #4]
 8000b5e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000b60:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b62:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000b64:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b68:	f025 0501 	bic.w	r5, r5, #1
 8000b6c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000b6e:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000b70:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000b72:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000b76:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000b7c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000b7e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b80:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b84:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000b88:	e7d7      	b.n	8000b3a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000b8a:	684c      	ldr	r4, [r1, #4]
 8000b8c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000b8e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b90:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000b92:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b96:	f025 0501 	bic.w	r5, r5, #1
 8000b9a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000b9c:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000b9e:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000ba0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000ba4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000ba8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000baa:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000bac:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000bae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000bb2:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000bb6:	e7c0      	b.n	8000b3a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000bb8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000bba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000bbe:	f042 0207 	orr.w	r2, r2, #7
 8000bc2:	e7ba      	b.n	8000b3a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000bc4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000bc6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000bca:	f042 0217 	orr.w	r2, r2, #23
 8000bce:	e7b4      	b.n	8000b3a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000bd0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000bd2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000bd6:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8000bda:	e7ae      	b.n	8000b3a <HAL_TIM_ConfigClockSource+0xd0>

08000bdc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000bdc:	4a1a      	ldr	r2, [pc, #104]	; (8000c48 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8000bde:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000be0:	4290      	cmp	r0, r2
 8000be2:	d00a      	beq.n	8000bfa <TIM_Base_SetConfig+0x1e>
 8000be4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000be8:	d007      	beq.n	8000bfa <TIM_Base_SetConfig+0x1e>
 8000bea:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000bee:	4290      	cmp	r0, r2
 8000bf0:	d003      	beq.n	8000bfa <TIM_Base_SetConfig+0x1e>
 8000bf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bf6:	4290      	cmp	r0, r2
 8000bf8:	d115      	bne.n	8000c26 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8000bfa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000c00:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000c02:	4a11      	ldr	r2, [pc, #68]	; (8000c48 <TIM_Base_SetConfig+0x6c>)
 8000c04:	4290      	cmp	r0, r2
 8000c06:	d00a      	beq.n	8000c1e <TIM_Base_SetConfig+0x42>
 8000c08:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000c0c:	d007      	beq.n	8000c1e <TIM_Base_SetConfig+0x42>
 8000c0e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000c12:	4290      	cmp	r0, r2
 8000c14:	d003      	beq.n	8000c1e <TIM_Base_SetConfig+0x42>
 8000c16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c1a:	4290      	cmp	r0, r2
 8000c1c:	d103      	bne.n	8000c26 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000c1e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000c24:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000c26:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8000c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000c2c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8000c2e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000c30:	688b      	ldr	r3, [r1, #8]
 8000c32:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000c34:	680b      	ldr	r3, [r1, #0]
 8000c36:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000c38:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <TIM_Base_SetConfig+0x6c>)
 8000c3a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8000c3c:	bf04      	itt	eq
 8000c3e:	690b      	ldreq	r3, [r1, #16]
 8000c40:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8000c42:	2301      	movs	r3, #1
 8000c44:	6143      	str	r3, [r0, #20]
 8000c46:	4770      	bx	lr
 8000c48:	40012c00 	.word	0x40012c00

08000c4c <HAL_TIM_Base_Init>:
{
 8000c4c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000c4e:	4604      	mov	r4, r0
 8000c50:	b1a0      	cbz	r0, 8000c7c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000c52:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000c56:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c5a:	b91b      	cbnz	r3, 8000c64 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000c5c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000c60:	f000 fa26 	bl	80010b0 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000c64:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c66:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000c68:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c6c:	1d21      	adds	r1, r4, #4
 8000c6e:	f7ff ffb5 	bl	8000bdc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000c72:	2301      	movs	r3, #1
  return HAL_OK;
 8000c74:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000c76:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000c7a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c7c:	2001      	movs	r0, #1
}
 8000c7e:	bd10      	pop	{r4, pc}

08000c80 <HAL_TIM_PWM_Init>:
{
 8000c80:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000c82:	4604      	mov	r4, r0
 8000c84:	b1a0      	cbz	r0, 8000cb0 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000c86:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000c8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c8e:	b91b      	cbnz	r3, 8000c98 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000c90:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8000c94:	f7ff fee8 	bl	8000a68 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000c98:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c9a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000c9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000ca0:	1d21      	adds	r1, r4, #4
 8000ca2:	f7ff ff9b 	bl	8000bdc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000ca6:	2301      	movs	r3, #1
  return HAL_OK;
 8000ca8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000caa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000cae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000cb0:	2001      	movs	r0, #1
}
 8000cb2:	bd10      	pop	{r4, pc}

08000cb4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000cb4:	6a03      	ldr	r3, [r0, #32]
{
 8000cb6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000cb8:	f023 0310 	bic.w	r3, r3, #16
 8000cbc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8000cbe:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8000cc0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8000cc2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000cc4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000cc6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000cca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000cce:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8000cd0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000cd4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8000cd8:	4d0b      	ldr	r5, [pc, #44]	; (8000d08 <TIM_OC2_SetConfig+0x54>)
 8000cda:	42a8      	cmp	r0, r5
 8000cdc:	d10d      	bne.n	8000cfa <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000cde:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8000ce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000ce4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8000ce8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8000cea:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8000cec:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8000cf0:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8000cf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8000cf6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8000cfa:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000cfc:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8000cfe:	684a      	ldr	r2, [r1, #4]
 8000d00:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8000d02:	6203      	str	r3, [r0, #32]
 8000d04:	bd70      	pop	{r4, r5, r6, pc}
 8000d06:	bf00      	nop
 8000d08:	40012c00 	.word	0x40012c00

08000d0c <HAL_TIM_PWM_ConfigChannel>:
{
 8000d0c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8000d0e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000d12:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	f04f 0002 	mov.w	r0, #2
 8000d1a:	d025      	beq.n	8000d68 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8000d1c:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8000d1e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8000d22:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8000d26:	2a0c      	cmp	r2, #12
 8000d28:	d818      	bhi.n	8000d5c <HAL_TIM_PWM_ConfigChannel+0x50>
 8000d2a:	e8df f002 	tbb	[pc, r2]
 8000d2e:	1707      	.short	0x1707
 8000d30:	171e1717 	.word	0x171e1717
 8000d34:	172f1717 	.word	0x172f1717
 8000d38:	1717      	.short	0x1717
 8000d3a:	40          	.byte	0x40
 8000d3b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8000d3c:	6820      	ldr	r0, [r4, #0]
 8000d3e:	f7ff fe1f 	bl	8000980 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000d42:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000d44:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000d46:	699a      	ldr	r2, [r3, #24]
 8000d48:	f042 0208 	orr.w	r2, r2, #8
 8000d4c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8000d4e:	699a      	ldr	r2, [r3, #24]
 8000d50:	f022 0204 	bic.w	r2, r2, #4
 8000d54:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000d56:	699a      	ldr	r2, [r3, #24]
 8000d58:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8000d5a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8000d5c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000d5e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000d60:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8000d64:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8000d68:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8000d6a:	6820      	ldr	r0, [r4, #0]
 8000d6c:	f7ff ffa2 	bl	8000cb4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000d70:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8000d72:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000d74:	699a      	ldr	r2, [r3, #24]
 8000d76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8000d7c:	699a      	ldr	r2, [r3, #24]
 8000d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8000d84:	699a      	ldr	r2, [r3, #24]
 8000d86:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d8a:	e7e6      	b.n	8000d5a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8000d8c:	6820      	ldr	r0, [r4, #0]
 8000d8e:	f7ff fe1f 	bl	80009d0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000d92:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8000d94:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000d96:	69da      	ldr	r2, [r3, #28]
 8000d98:	f042 0208 	orr.w	r2, r2, #8
 8000d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8000d9e:	69da      	ldr	r2, [r3, #28]
 8000da0:	f022 0204 	bic.w	r2, r2, #4
 8000da4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8000da6:	69da      	ldr	r2, [r3, #28]
 8000da8:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8000daa:	61da      	str	r2, [r3, #28]
    break;
 8000dac:	e7d6      	b.n	8000d5c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8000dae:	6820      	ldr	r0, [r4, #0]
 8000db0:	f7ff fe38 	bl	8000a24 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000db4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8000db6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000db8:	69da      	ldr	r2, [r3, #28]
 8000dba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000dbe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8000dc0:	69da      	ldr	r2, [r3, #28]
 8000dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000dc6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8000dc8:	69da      	ldr	r2, [r3, #28]
 8000dca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000dce:	e7ec      	b.n	8000daa <HAL_TIM_PWM_ConfigChannel+0x9e>

08000dd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8000dd0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8000dd2:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8000dd4:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8000dd6:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8000dd8:	ea23 0304 	bic.w	r3, r3, r4
 8000ddc:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8000dde:	6a03      	ldr	r3, [r0, #32]
 8000de0:	408a      	lsls	r2, r1
 8000de2:	431a      	orrs	r2, r3
 8000de4:	6202      	str	r2, [r0, #32]
 8000de6:	bd10      	pop	{r4, pc}

08000de8 <HAL_TIM_PWM_Start>:
{
 8000de8:	b510      	push	{r4, lr}
 8000dea:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8000dec:	2201      	movs	r2, #1
 8000dee:	6800      	ldr	r0, [r0, #0]
 8000df0:	f7ff ffee 	bl	8000dd0 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8000df4:	6823      	ldr	r3, [r4, #0]
 8000df6:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <HAL_TIM_PWM_Start+0x28>)
}
 8000df8:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8000dfa:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8000dfc:	bf02      	ittt	eq
 8000dfe:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8000e00:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8000e04:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	f042 0201 	orr.w	r2, r2, #1
 8000e0c:	601a      	str	r2, [r3, #0]
}
 8000e0e:	bd10      	pop	{r4, pc}
 8000e10:	40012c00 	.word	0x40012c00

08000e14 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8000e14:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d01f      	beq.n	8000e5c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8000e1c:	68cb      	ldr	r3, [r1, #12]
 8000e1e:	688a      	ldr	r2, [r1, #8]
 8000e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e24:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8000e26:	684a      	ldr	r2, [r1, #4]
 8000e28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e2c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8000e2e:	680a      	ldr	r2, [r1, #0]
 8000e30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e34:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8000e36:	690a      	ldr	r2, [r1, #16]
 8000e38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e3c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8000e3e:	694a      	ldr	r2, [r1, #20]
 8000e40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e44:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8000e46:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8000e48:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e4c:	4313      	orrs	r3, r2

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8000e4e:	6802      	ldr	r2, [r0, #0]
 8000e50:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8000e52:	2300      	movs	r3, #0
 8000e54:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8000e58:	4618      	mov	r0, r3
 8000e5a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8000e5c:	2002      	movs	r0, #2
}
 8000e5e:	4770      	bx	lr

08000e60 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8000e60:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000e64:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	f04f 0302 	mov.w	r3, #2
 8000e6c:	d018      	beq.n	8000ea0 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8000e6e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000e72:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000e74:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000e76:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000e78:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000e7a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000e7e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	4322      	orrs	r2, r4
 8000e84:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e8c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	430a      	orrs	r2, r1
 8000e92:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8000e94:	2301      	movs	r3, #1
 8000e96:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000ea0:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000ea2:	bd10      	pop	{r4, pc}

08000ea4 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ea4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 8000ea8:	b510      	push	{r4, lr}
 8000eaa:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eac:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eae:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000eb0:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb2:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eb4:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000eb6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eba:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ebc:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ebe:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec0:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec2:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ec4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec6:	f7ff fae9 	bl	800049c <HAL_RCC_OscConfig>
 8000eca:	b100      	cbz	r0, 8000ece <SystemClock_Config+0x2a>
 8000ecc:	e7fe      	b.n	8000ecc <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ece:	230f      	movs	r3, #15
 8000ed0:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed6:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed8:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eda:	4621      	mov	r1, r4
 8000edc:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ede:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ee0:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ee2:	f7ff fca3 	bl	800082c <HAL_RCC_ClockConfig>
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	b100      	cbz	r0, 8000eec <SystemClock_Config+0x48>
 8000eea:	e7fe      	b.n	8000eea <SystemClock_Config+0x46>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000eec:	f7ff fd42 	bl	8000974 <HAL_RCC_GetHCLKFreq>
 8000ef0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ef8:	f7ff f9c8 	bl	800028c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000efc:	2004      	movs	r0, #4
 8000efe:	f7ff f9db 	bl	80002b8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000f02:	4622      	mov	r2, r4
 8000f04:	4621      	mov	r1, r4
 8000f06:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0a:	f7ff f98b 	bl	8000224 <HAL_NVIC_SetPriority>
}
 8000f0e:	b010      	add	sp, #64	; 0x40
 8000f10:	bd10      	pop	{r4, pc}
	...

08000f14 <main>:
{
 8000f14:	b570      	push	{r4, r5, r6, lr}
 8000f16:	b096      	sub	sp, #88	; 0x58
  HAL_Init();
 8000f18:	f7ff f93c 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8000f1c:	f7ff ffc2 	bl	8000ea4 <SystemClock_Config>
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 18-1;
 8000f20:	f04f 0e11 	mov.w	lr, #17
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f24:	4b3c      	ldr	r3, [pc, #240]	; (8001018 <main+0x104>)
  htim1.Instance = TIM1;
 8000f26:	4c3d      	ldr	r4, [pc, #244]	; (800101c <main+0x108>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f28:	699a      	ldr	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f2a:	4620      	mov	r0, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f2c:	f042 0220 	orr.w	r2, r2, #32
 8000f30:	619a      	str	r2, [r3, #24]
 8000f32:	699a      	ldr	r2, [r3, #24]
 8000f34:	4625      	mov	r5, r4
 8000f36:	f002 0220 	and.w	r2, r2, #32
 8000f3a:	9200      	str	r2, [sp, #0]
 8000f3c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	699a      	ldr	r2, [r3, #24]
 8000f40:	f042 0204 	orr.w	r2, r2, #4
 8000f44:	619a      	str	r2, [r3, #24]
 8000f46:	699b      	ldr	r3, [r3, #24]
  htim1.Init.Period = 1024-1;
 8000f48:	f240 32ff 	movw	r2, #1023	; 0x3ff
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4c:	f003 0304 	and.w	r3, r3, #4
 8000f50:	9301      	str	r3, [sp, #4]
 8000f52:	9b01      	ldr	r3, [sp, #4]
  htim1.Init.Prescaler = 18-1;
 8000f54:	4b32      	ldr	r3, [pc, #200]	; (8001020 <main+0x10c>)
  htim1.Init.Period = 1024-1;
 8000f56:	60e2      	str	r2, [r4, #12]
  htim1.Init.Prescaler = 18-1;
 8000f58:	e884 4008 	stmia.w	r4, {r3, lr}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60a3      	str	r3, [r4, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f60:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f62:	6163      	str	r3, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f64:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f66:	f7ff fe71 	bl	8000c4c <HAL_TIM_Base_Init>
 8000f6a:	b100      	cbz	r0, 8000f6e <main+0x5a>
 8000f6c:	e7fe      	b.n	8000f6c <main+0x58>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f72:	a916      	add	r1, sp, #88	; 0x58
 8000f74:	f841 3d48 	str.w	r3, [r1, #-72]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f78:	4620      	mov	r0, r4
 8000f7a:	f7ff fd76 	bl	8000a6a <HAL_TIM_ConfigClockSource>
 8000f7e:	b100      	cbz	r0, 8000f82 <main+0x6e>
 8000f80:	e7fe      	b.n	8000f80 <main+0x6c>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f82:	4620      	mov	r0, r4
 8000f84:	f7ff fe7c 	bl	8000c80 <HAL_TIM_PWM_Init>
 8000f88:	b100      	cbz	r0, 8000f8c <main+0x78>
 8000f8a:	e7fe      	b.n	8000f8a <main+0x76>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f8c:	9002      	str	r0, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8e:	9003      	str	r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f90:	a902      	add	r1, sp, #8
 8000f92:	4620      	mov	r0, r4
 8000f94:	f7ff ff64 	bl	8000e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	b100      	cbz	r0, 8000f9e <main+0x8a>
 8000f9c:	e7fe      	b.n	8000f9c <main+0x88>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f9e:	2360      	movs	r3, #96	; 0x60
 8000fa0:	9308      	str	r3, [sp, #32]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000fa2:	2304      	movs	r3, #4
  sConfigOC.Pulse = 0;
 8000fa4:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fa6:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fa8:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000faa:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fac:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fae:	a908      	add	r1, sp, #32
 8000fb0:	4620      	mov	r0, r4
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000fb2:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fb4:	f7ff feaa 	bl	8000d0c <HAL_TIM_PWM_ConfigChannel>
 8000fb8:	b100      	cbz	r0, 8000fbc <main+0xa8>
 8000fba:	e7fe      	b.n	8000fba <main+0xa6>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fc0:	900f      	str	r0, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fc2:	9010      	str	r0, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fc4:	9011      	str	r0, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fc6:	9012      	str	r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fc8:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fca:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fcc:	a90f      	add	r1, sp, #60	; 0x3c
 8000fce:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fd0:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fd2:	f7ff ff1f 	bl	8000e14 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	b100      	cbz	r0, 8000fdc <main+0xc8>
 8000fda:	e7fe      	b.n	8000fda <main+0xc6>
  HAL_TIM_MspPostInit(&htim1);
 8000fdc:	4628      	mov	r0, r5
 8000fde:	f000 f87b 	bl	80010d8 <HAL_TIM_MspPostInit>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000fe2:	4621      	mov	r1, r4
 8000fe4:	4628      	mov	r0, r5
 8000fe6:	f7ff feff 	bl	8000de8 <HAL_TIM_PWM_Start>
   for(int i = 0; i < 1024; i+=50)
 8000fea:	f240 461a 	movw	r6, #1050	; 0x41a
 8000fee:	2400      	movs	r4, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 8000ff0:	682b      	ldr	r3, [r5, #0]
	HAL_Delay(50);
 8000ff2:	2032      	movs	r0, #50	; 0x32
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 8000ff4:	635c      	str	r4, [r3, #52]	; 0x34
   for(int i = 0; i < 1024; i+=50)
 8000ff6:	3432      	adds	r4, #50	; 0x32
	HAL_Delay(50);
 8000ff8:	f7ff f8f0 	bl	80001dc <HAL_Delay>
   for(int i = 0; i < 1024; i+=50)
 8000ffc:	42b4      	cmp	r4, r6
 8000ffe:	d1f7      	bne.n	8000ff0 <main+0xdc>
 8001000:	f44f 6480 	mov.w	r4, #1024	; 0x400
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 8001004:	682b      	ldr	r3, [r5, #0]
	HAL_Delay(50);
 8001006:	2032      	movs	r0, #50	; 0x32
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 8001008:	635c      	str	r4, [r3, #52]	; 0x34
   for(int i = 1024; i > 0; i-=50)
 800100a:	3c32      	subs	r4, #50	; 0x32
	HAL_Delay(50);
 800100c:	f7ff f8e6 	bl	80001dc <HAL_Delay>
   for(int i = 1024; i > 0; i-=50)
 8001010:	f114 0f1a 	cmn.w	r4, #26
 8001014:	d1f6      	bne.n	8001004 <main+0xf0>
 8001016:	e7ea      	b.n	8000fee <main+0xda>
 8001018:	40021000 	.word	0x40021000
 800101c:	2000002c 	.word	0x2000002c
 8001020:	40012c00 	.word	0x40012c00

08001024 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001024:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <HAL_MspInit+0x84>)
{
 8001026:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001028:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102a:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 800102c:	f042 0201 	orr.w	r2, r2, #1
 8001030:	619a      	str	r2, [r3, #24]
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103c:	f7ff f8e0 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	f06f 000b 	mvn.w	r0, #11
 8001046:	4611      	mov	r1, r2
 8001048:	f7ff f8ec 	bl	8000224 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800104c:	2200      	movs	r2, #0
 800104e:	f06f 000a 	mvn.w	r0, #10
 8001052:	4611      	mov	r1, r2
 8001054:	f7ff f8e6 	bl	8000224 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	f06f 0009 	mvn.w	r0, #9
 800105e:	4611      	mov	r1, r2
 8001060:	f7ff f8e0 	bl	8000224 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	f06f 0004 	mvn.w	r0, #4
 800106a:	4611      	mov	r1, r2
 800106c:	f7ff f8da 	bl	8000224 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001070:	2200      	movs	r2, #0
 8001072:	f06f 0003 	mvn.w	r0, #3
 8001076:	4611      	mov	r1, r2
 8001078:	f7ff f8d4 	bl	8000224 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	f06f 0001 	mvn.w	r0, #1
 8001082:	4611      	mov	r1, r2
 8001084:	f7ff f8ce 	bl	8000224 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	f04f 30ff 	mov.w	r0, #4294967295
 800108e:	4611      	mov	r1, r2
 8001090:	f7ff f8c8 	bl	8000224 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001094:	4a05      	ldr	r2, [pc, #20]	; (80010ac <HAL_MspInit+0x88>)
 8001096:	6853      	ldr	r3, [r2, #4]
 8001098:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800109c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a2:	b003      	add	sp, #12
 80010a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40010000 	.word	0x40010000

080010b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM1)
 80010b0:	6802      	ldr	r2, [r0, #0]
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <HAL_TIM_Base_MspInit+0x24>)
{
 80010b4:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d10a      	bne.n	80010d0 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010ba:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80010be:	699a      	ldr	r2, [r3, #24]
 80010c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80010c4:	619a      	str	r2, [r3, #24]
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010cc:	9301      	str	r3, [sp, #4]
 80010ce:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80010d0:	b002      	add	sp, #8
 80010d2:	4770      	bx	lr
 80010d4:	40012c00 	.word	0x40012c00

080010d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 80010da:	6802      	ldr	r2, [r0, #0]
 80010dc:	4b07      	ldr	r3, [pc, #28]	; (80010fc <HAL_TIM_MspPostInit+0x24>)
 80010de:	429a      	cmp	r2, r3
 80010e0:	d109      	bne.n	80010f6 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE END TIM1_MspPostInit 0 */
  
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e6:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	4669      	mov	r1, sp
 80010ec:	4804      	ldr	r0, [pc, #16]	; (8001100 <HAL_TIM_MspPostInit+0x28>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	f7ff f8f3 	bl	80002dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010f6:	b005      	add	sp, #20
 80010f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80010fc:	40012c00 	.word	0x40012c00
 8001100:	40010800 	.word	0x40010800

08001104 <NMI_Handler>:
 8001104:	4770      	bx	lr

08001106 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001106:	e7fe      	b.n	8001106 <HardFault_Handler>

08001108 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001108:	e7fe      	b.n	8001108 <MemManage_Handler>

0800110a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800110a:	e7fe      	b.n	800110a <BusFault_Handler>

0800110c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800110c:	e7fe      	b.n	800110c <UsageFault_Handler>

0800110e <SVC_Handler>:
 800110e:	4770      	bx	lr

08001110 <DebugMon_Handler>:
 8001110:	4770      	bx	lr

08001112 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001112:	4770      	bx	lr

08001114 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001114:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001116:	f7ff f84f 	bl	80001b8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800111a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800111e:	f7ff b8d8 	b.w	80002d2 <HAL_SYSTICK_IRQHandler>
	...

08001124 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <SystemInit+0x40>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	f042 0201 	orr.w	r2, r2, #1
 800112c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800112e:	6859      	ldr	r1, [r3, #4]
 8001130:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <SystemInit+0x44>)
 8001132:	400a      	ands	r2, r1
 8001134:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800113c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001140:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001148:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001150:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001152:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001156:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001158:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800115c:	4b03      	ldr	r3, [pc, #12]	; (800116c <SystemInit+0x48>)
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000
 8001168:	f8ff0000 	.word	0xf8ff0000
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001170:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001172:	e003      	b.n	800117c <LoopCopyDataInit>

08001174 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001176:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001178:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800117a:	3104      	adds	r1, #4

0800117c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800117c:	480a      	ldr	r0, [pc, #40]	; (80011a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001180:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001182:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001184:	d3f6      	bcc.n	8001174 <CopyDataInit>
  ldr r2, =_sbss
 8001186:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001188:	e002      	b.n	8001190 <LoopFillZerobss>

0800118a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800118c:	f842 3b04 	str.w	r3, [r2], #4

08001190 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001192:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001194:	d3f9      	bcc.n	800118a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001196:	f7ff ffc5 	bl	8001124 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800119a:	f000 f80f 	bl	80011bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800119e:	f7ff feb9 	bl	8000f14 <main>
  bx lr
 80011a2:	4770      	bx	lr
  ldr r3, =_sidata
 80011a4:	08001244 	.word	0x08001244
  ldr r0, =_sdata
 80011a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80011ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80011b0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80011b4:	2000006c 	.word	0x2000006c

080011b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b8:	e7fe      	b.n	80011b8 <ADC1_2_IRQHandler>
	...

080011bc <__libc_init_array>:
 80011bc:	b570      	push	{r4, r5, r6, lr}
 80011be:	2500      	movs	r5, #0
 80011c0:	4e0c      	ldr	r6, [pc, #48]	; (80011f4 <__libc_init_array+0x38>)
 80011c2:	4c0d      	ldr	r4, [pc, #52]	; (80011f8 <__libc_init_array+0x3c>)
 80011c4:	1ba4      	subs	r4, r4, r6
 80011c6:	10a4      	asrs	r4, r4, #2
 80011c8:	42a5      	cmp	r5, r4
 80011ca:	d109      	bne.n	80011e0 <__libc_init_array+0x24>
 80011cc:	f000 f81a 	bl	8001204 <_init>
 80011d0:	2500      	movs	r5, #0
 80011d2:	4e0a      	ldr	r6, [pc, #40]	; (80011fc <__libc_init_array+0x40>)
 80011d4:	4c0a      	ldr	r4, [pc, #40]	; (8001200 <__libc_init_array+0x44>)
 80011d6:	1ba4      	subs	r4, r4, r6
 80011d8:	10a4      	asrs	r4, r4, #2
 80011da:	42a5      	cmp	r5, r4
 80011dc:	d105      	bne.n	80011ea <__libc_init_array+0x2e>
 80011de:	bd70      	pop	{r4, r5, r6, pc}
 80011e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011e4:	4798      	blx	r3
 80011e6:	3501      	adds	r5, #1
 80011e8:	e7ee      	b.n	80011c8 <__libc_init_array+0xc>
 80011ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011ee:	4798      	blx	r3
 80011f0:	3501      	adds	r5, #1
 80011f2:	e7f2      	b.n	80011da <__libc_init_array+0x1e>
 80011f4:	0800123c 	.word	0x0800123c
 80011f8:	0800123c 	.word	0x0800123c
 80011fc:	0800123c 	.word	0x0800123c
 8001200:	08001240 	.word	0x08001240

08001204 <_init>:
 8001204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001206:	bf00      	nop
 8001208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800120a:	bc08      	pop	{r3}
 800120c:	469e      	mov	lr, r3
 800120e:	4770      	bx	lr

08001210 <_fini>:
 8001210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001212:	bf00      	nop
 8001214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001216:	bc08      	pop	{r3}
 8001218:	469e      	mov	lr, r3
 800121a:	4770      	bx	lr
